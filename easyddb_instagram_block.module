<?php

/**
 * @file
 * Module file for the easyddb_instagram_block module.
 */

use Drupal\xautoload\Adapter\LocalDirectoryAdapter;
use EasyddbFacebook\InstagramBlock\EasyddbInstagramBlockDataRequest;
use EasyddbFacebook\InstagramBlock\EasyddbInstagramBlockFacebook;

/**
 * @const string module configuration path.
 */
const IG_BLOCK_BASE_SETTINGS_PATH = 'admin/config/services/easyddb_instagram_block';
/**
 * @const string module logout path.
 */
const IG_BLOCK_BASE_SETTINGS_PATH_LOGOUT = 'admin/config/services/easyddb_instagram_block/logout';

/**
 * Implements hook_xautoload().
 */
function easyddb_instagram_block_xautoload(LocalDirectoryAdapter $adapter): void {
  $adapter->addPsr4('EasyddbFacebook', 'lib/EasyddbFacebook/src');
}

/**
 * Implements hook_help().
 */
function easyddb_instagram_block_help($path) {
  if ($path === 'admin/help#' . IG_BLOCK_BASE_SETTINGS_PATH) {
    return t('Module for getting Instagram images by hashtag.');
  }
}

/**
 * Implements hook_menu().
 */
function easyddb_instagram_block_menu(): array {
  $items[IG_BLOCK_BASE_SETTINGS_PATH] = array(
    'title' => 'Easyddb Instagram Block',
    'description' => 'Configuration page for Instagram Block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('easyddb_instagram_block_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'easyddb_instagram_block.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items[IG_BLOCK_BASE_SETTINGS_PATH_LOGOUT] = array(
    'title' => 'Facebook Logout',
    'description' => 'Callback that executes right after login in from Facebook.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'easyddb_instagram_block_logout',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * De-authorize Facebook application.
 */
function easyddb_instagram_block_logout() {
  variable_del('easyddb_instagram_block_access_token');
  variable_del('easyddb_instagram_block_access_token_expires');
  drupal_goto(IG_BLOCK_BASE_SETTINGS_PATH);
}

/**
 * Implements hook_block_info().
 *
 * Defines the new instagram block.
 */
function easyddb_instagram_block_block_info(): array {
  $hashtag_media_config = variable_get('easyddb_instagram_block_hashtag_block_settings', []);
  $blocks['easyddb_instagram_block_hashtag'] = array(
    'info' => t('Instagram Block - Hashtag Media'),
    'cache' => $hashtag_media_config['block_cache'] ?? DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * Set values to be used when rendering the block later.
 */
function easyddb_instagram_block_block_configure($delta = ''): array {
  $form = [];
  $description = '';

  $form['#admin_data'] = variable_get('easyddb_instagram_block_admin_settings', []);

  $form['description'] = [
    '#title' => t('Description'),
    '#type' => 'item',
    '#weight' => -50,
  ];

  $form['hashtag'] = [
    '#type' => 'textfield',
    '#title' => t('Instagram Hashtag'),
    '#description' => t('Add hashtag name without # symbol. You can query a maximum of 30 unique hashtags within a 7 day period.'),
    '#required' => TRUE,
  ];

  $media_description = [
    t('Choose the image type to get.'),
    t('Only returns public photos.'),
    t('NOTE: Recent Images - Only returns media objects published within 24 hours of query execution.'),
  ];

  $form['media_edge'] = [
    '#type' => 'select',
    '#title' => t('Image type'),
    '#description' => implode('<br>', $media_description),
    '#options' => [
      EasyddbInstagramBlockFacebook::ENDPOINT_MEDIA_TOP => t('Top Images'),
      EasyddbInstagramBlockFacebook::ENDPOINT_MEDIA_RECENT => t('Recent Images'),
    ],
  ];

  $form['count'] = [
    '#type' => 'textfield',
    '#title' => t('Number of images to display.'),
  ];

  $form['width'] = [
    '#type' => 'textfield',
    '#title' => t('Image width in pixels.'),
  ];

  $form['height'] = [
    '#type' => 'textfield',
    '#title' => t('Image height in pixels.'),
  ];

  $form['block_cache'] = [
    '#type' => 'select',
    '#title' => t('Block Cache Settings'),
    '#description' => t('Configure block caching.'),
    '#options' => [
      DRUPAL_CACHE_GLOBAL => t('Cache block globally'),
      DRUPAL_NO_CACHE => t("Don't cache block"),
    ],
  ];

  switch ($delta) {
    case 'easyddb_instagram_block_hashtag':
      $form['#block_data'] = variable_get('easyddb_instagram_block_hashtag_block_settings', []);
      $description = t('Configurations in this block utilize the !globalconfig.', array(
        '!globalconfig' => l(t('global configuration'), IG_BLOCK_BASE_SETTINGS_PATH),
      ));

      $form['hashtag']['#default_value'] = $form['#block_data']['hashtag'] ?? variable_get('easyddb_instagram_block_hashtag', '');
      $form['media_edge']['#default_value'] = $form['#block_data']['media_edge'] ?? EasyddbInstagramBlockFacebook::ENDPOINT_MEDIA_TOP;
      $form['count']['#default_value'] = $form['#block_data']['count'] ?? 0;
      $form['width']['#default_value'] = $form['#block_data']['width'] ?? 100;
      $form['height']['#default_value'] = $form['#block_data']['height'] ?? 100;
      $form['block_cache']['#default_value'] = $form['#block_data']['block_cache'] ?? DRUPAL_CACHE_GLOBAL;
      break;
  }

  $form['description']['#markup'] = $description;

  return $form;
}

/**
 * Implements hook_block_save().
 *
 * Save the information from the configuration form to a drupal variable.
 */
function easyddb_instagram_block_block_save($delta = '', $edit = []) {
  switch ($delta) {
    case 'easyddb_instagram_block_hashtag':
      $variables = variable_get('easyddb_instagram_block_hashtag_block_settings', []);

      $hashtag_changed = variable_get('easyddb_instagram_block_hashtag', '') !== $edit['hashtag'];
      $img_type_changed = $variables['media_edge'] !== $edit['media_edge'];
      $count_changed = $variables['count'] !== $edit['count'];
      $updated = $hashtag_changed || $img_type_changed || $count_changed;

      $save_values = array_merge($variables, $edit);
      variable_set('easyddb_instagram_block_hashtag_block_settings', $save_values);

      if ($hashtag_changed) {
        // Save hashtag name and id in basic settings.
        variable_set('easyddb_instagram_block_hashtag', $save_values['hashtag']);
        $user_id = variable_get('easyddb_instagram_block_ig_user_id', '');
        $access_token = variable_get('easyddb_instagram_block_access_token', '');
        $request = new EasyddbInstagramBlockDataRequest($user_id, $access_token);
        $hashtag_id = $request->requestHashtagId($save_values['hashtag']);
        variable_set('easyddb_instagram_block_hashtag_id', $hashtag_id);
      }

      if ($updated) {
        cache_clear_all('easyddb_instagram_block', 'cache');
      }
      break;
  }
}

/**
 * Implements hook_block_view().
 *
 * Fetches the instagram photos and creates a render array.
 */
function easyddb_instagram_block_block_view($delta = ''): array {
  $user_id = variable_get('easyddb_instagram_block_ig_user_id', '');
  $access_token = variable_get('easyddb_instagram_block_access_token', '');
  $access_token_expire = variable_get('easyddb_instagram_block_access_token_expires', 0);
  $token_available = !empty($access_token) && ($access_token_expire > REQUEST_TIME);
  $hashtag_id = variable_get('easyddb_instagram_block_hashtag_id', '');
  $values = variable_get('easyddb_instagram_block_hashtag_block_settings', []);

  $content = $response = [];
  $block = [
    'subject' => t('Instagram block - Hashtag Media'),
    'content' => [
      '#attached' => [
        'css' => [drupal_get_path('module', 'easyddb_instagram_block') . '/css/instagram-block.css'],
      ],
    ],
  ];

  // Check that block configuration is available.
  if (!$token_available || empty($user_id) || empty($hashtag_id)) {
    $content = easyddb_instagram_block_get_configuration_reminder();
  }
  else {
    $cache = cache_get('easyddb_instagram_block');
    $cache_data_exist = isset($cache) && !empty($cache->data) && REQUEST_TIME < (int) $cache->expire;
    if ($cache_data_exist) {
      $response = $cache->data;
    }
    elseif (!isset($cache) || empty($cache->data) || REQUEST_TIME > (int) $cache->expire) {
      $request = new EasyddbInstagramBlockDataRequest($user_id, $access_token);
      $request->requestMedia($hashtag_id, $values['media_edge']);
      $response = $request->getImages((int) $values['count']);

      $cache_time = variable_get('easyddb_instagram_block_cache_request', '2-hour');
      $expire = strtotime(str_replace('-', ' ', $cache_time), REQUEST_TIME);
      if (!empty($response)) {
        cache_set('easyddb_instagram_block', $response, 'cache', $expire);
      }
    }
    foreach ($response as $img) {
      $content[] = [
        '#markup' => '',
        '#theme' => 'easyddb_instagram_block_image',
        '#id' => $img->id,
        '#caption' => text_summary($img->caption, 'filter_htmlcorrector', 100),
        '#href' => $img->permalink,
        '#src' => $img->media_url,
        '#width' => $values['width'],
        '#height' => $values['height'],
      ];
    }
    $block['subject'] = '#' . $values['hashtag'];
  }
  $block['content']['#markup'] = theme('easyddb_instagram_block', array(
    'content' => !empty($content) ? $content : t('There is no images to display.'),
    'response' => $response,
  ));

  return $block;
}

/**
 * Implements hook_theme().
 */
function easyddb_instagram_block_theme(): array {
  return [
    'easyddb_instagram_block_image' => [
      'variables' => [
        'id' => NULL,
        'caption' => NULL,
        'height' => NULL,
        'width' => NULL,
        'src' => NULL,
        'href' => NULL,
      ],
      'template' => 'templates/easyddb_instagram_block_image',
    ],
    'easyddb_instagram_block' => [
      'variables' => [
        'content' => NULL,
        'response' => NULL,
      ],
      'template' => 'templates/easyddb_instagram_block',
    ],
  ];
}

/**
 * Builds render array to remind user to configure block settings.
 */
function easyddb_instagram_block_get_configuration_reminder(): array {
  return [
    '#markup' => t('Missing configuration or Access token expired. Please !configure.',
      ['!configure' => l(t('configure'), IG_BLOCK_BASE_SETTINGS_PATH)]),
  ];
}

/**
 * Implements hook_cron().
 */
function easyddb_instagram_block_cron() {
  $app_id = variable_get('easyddb_instagram_block_app_id', '');
  $app_secret = variable_get('easyddb_instagram_block_app_secret', '');

  if (empty($app_id) || empty($app_secret)) {
    return;
  }
  $token_expires = variable_get('easyddb_instagram_block_access_token_expires', 0);
  // Token is valid for 60 days, we will refresh this within 7 days before
  // expiration.
  if (REQUEST_TIME >= (int) $token_expires - 604800) {
    $fb_connect = new EasyddbInstagramBlockFacebook($app_id, $app_secret);
    $response = $fb_connect->authRefreshAccessToken(variable_get('easyddb_instagram_block_access_token', ''));
    variable_set('easyddb_instagram_block_access_token', $response->access_token);
    variable_set('easyddb_instagram_block_access_token_expires', REQUEST_TIME + $response->expires_in);
  }
}
